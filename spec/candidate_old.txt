require 'spec_helper'

module OpenFecApi
  RSpec.describe Client do
    describe '#Client' do
      context 'when configured' do
        before do
          @client = OpenFecApi::Client.new('raGR4XbELamehq14HZCCK6i7LJ93U9Ftw0kZVU0M')
        end






# require 'spec_helper'

# module OpenFecApi
# RSpec.describe Candidate do
#   describe '#Candidate' do
#     context 'when configured' do
#       before do
#         @client = OpenFecApi::Client.new('raGR4XbELamehq14HZCCK6i7LJ93U9Ftw0kZVU0M')
#       end

        # def request_and_print(options)
        #   response = @client.candidates(options)
        #   pp response.summary
        #   return response
        # end


        it "contains a valid api key" do
          @client.has_api_key?
          expect(true)
        end

        it "returns responses in json format" do
          response = @client.candidate.all
          expect(response).to be_kind_of(OpenFecApi::Response)
        end

        # it "accepts pagination options and avoids rate limits" do
        #   options = {:page => 1, :per_page => 100}
        #   response = @client.candidates.all_where(options)
        #   pp response.summary
        #   expect(response.results_count).to eql(100)
        #   while response.page < response.pages && response.page < 5 do
        #     options.merge!({:page => response.page + 1})
        #     response = request_and_print(options)
        #   end
        #   expect(true)
        # end

     #    it "allows search of candidates by name"
    	# end

    	it "filters candidates by state"
    		options = {:state => "VA"}
    		response = @client.candidate.all_where(options)
    		pp response.summary
    		expect(response.results.map{|c| c["state"]}.uniq).to eql(["VA"])
    	end
 

      end
    end
  end
end








# --------------------------







# require 'spec_helper'

# module OpenFecApi
#   RSpec.describe Candidate do
#     describe '#candidates' do
#       context 'when configured' do
#         before do
#           #OpenFecApi::Client.api_key = 'raGR4XbELamehq14HZCCK6i7LJ93U9Ftw0kZVU0M'
#           #@client = OpenFecApi::Client.new
#           @client = OpenFecApi::Client.new('raGR4XbELamehq14HZCCK6i7LJ93U9Ftw0kZVU0M')
#         end

#         # def request_and_print(options)
#         #   #make changes to correct response type
#         #   response = @client.candidates(options)
#         #   pp response.summary
#         #   return response
#         # end

#         it "contains a valid api key" do
#           @client.has_api_key?
#           expect(true)
#         end

#         it "returns responses in json format" do
#           response = @client.candidate.all
#           expect(response).to be_kind_of(OpenFecApi::Response)
#         end

#         it "accepts pagination options and avoids rate limits" do
#           options = {:page => 1, :per_page => 100}
#           response = @client.candidates.all_where(options)
#           pp response.summary
#           expect(response.results_count).to eql(100)
#           while response.page < response.pages && response.page < 5 do
#             options.merge!({:page => response.page + 1})
#             response = request_and_print(options)
#           end
#           expect(true)
#         end

#      #    it "allows search of candidates by name"
#     	# end

#     	it "filters candidates by state"
#     		options = {:state => "VA"}
#     		response = @client.candidate.all_where(options)
#     		pp response.summary
#     		expect(response.results.map{|c| c["state"]}.uniq).to eql(["VA"])
#     	end

#     	# it "filters candidates by election year"
#     	# end

#     	# it "filters candidates by party"
#     	# end

#     	# it "filter candidates by cycle"
#     	# end

#      #    it "allows search of candidate history"

#     	# end

#     	# it "allows search of candidate history by cycle"

#     	# end


#         # it "accepts endpoint-specific options" do
#         #   options = {:state => "VA"}
#         #   response = request_and_print(options)
#         #   expect(response.results.map{|c| c["state"]}.uniq).to eql(["VA"])
#         # end

#         # it "prevents unrecognized params from being requested" do
#         #   unrecognized_params = {:home_planet => "Mars"}
#         #   response = request_and_print(unrecognized_params)
#         #   recognized_params = response.request_query
#         #   expect(!recognized_params.keys.include?("home_planet"))
#         # end

#         # it "returns responses filtered on Committee_ID" do
#         #   committee_id = "C00563023"
#         #   response = committee.find_by_id(committee_id)
#         #   expect(response.results.map{|c| c["treasurer_name"]}.uniq).to eql(["RANDI M WILLIS"])

#         # end


#       end #context when configured
#     end #describe #candidates
#   end #Rspec.describe Candidate

# end #module openFecApi













# ----------------------------------















